import java.util.Iterator;
import edu.princeton.cs.algs4.*;

public class RandomizedQueue<Item> implements Iterable<Item> {
	Object[] array;
	int index = 0;
		
	public RandomizedQueue() {
		array = new Object[1];
	}
	
	public boolean isEmpty() {
		return index == 0;
	}
	
	public int size() {
		return index;
	}
	
	public void enqueue(Item item) {
		if(item == null) {
			throw new java.lang.IllegalArgumentException();
		}
	
		if(index == array.length) {
			resize(2*array.length);
		}
		array[index++] = item;
	}
	
	@SuppressWarnings("unchecked")
	public Item dequeue() {
		if(index == 0) {
			throw new java.util.NoSuchElementException();
		}
		
		int ranIndex = 	StdRandom.uniform(index);
		Item dequeueItem = (Item) array[ranIndex];
		
		// Move the last item to the position where a random item is removed		
		array[ranIndex] = array[--index];
		return dequeueItem;
	}
	
	@SuppressWarnings("unchecked")
	public Item sample() {
		if(index == 0) {
			throw new java.util.NoSuchElementException();
		}
		
		int ranIndex = 	StdRandom.uniform(index);
		return (Item) array[ranIndex];
	}
	
	@Override
	public Iterator<Item> iterator(){
		
		return null;
	}		
	
	private void resize(int capacity) {	
		Object[] copy = new Object[capacity];
		
		for(int i = 0 ; i < index; i++) {
			copy[i] = array[i];
		}
	}
	
	
	public static void main(String[] args) {

	}
}
